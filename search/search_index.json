{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"amba-analysis-worker-pubfinder Worker to try and find publication for unknown events","title":"Home"},{"location":"#amba-analysis-worker-pubfinder","text":"Worker to try and find publication for unknown events","title":"amba-analysis-worker-pubfinder"},{"location":"amba_source_ref/","text":"","title":"amba source"},{"location":"base_source_ref/","text":"","title":"base source"},{"location":"crossref_source_ref/","text":"","title":"crossref source"},{"location":"meta_source_ref/","text":"MetaSource \" this source will try to append data using meta tags in the url of the resolved doi url __init__ ( self , pubfinder ) special setup a ThreadPool, don't need the cpu since requests are slow and we wan't to share data Parameters: Name Type Description Default pubfinder the main process where we get data from and to required Source code in src/meta_source.py def __init__ ( self , pubfinder ): \"\"\"setup a ThreadPool, don't need the cpu since requests are slow and we wan't to share data Arguments: pubfinder: the main process where we get data from and to \"\"\" if not self . work_pool : self . work_pool = ThreadPool ( self . threads , self . worker , ()) self . pubfinder = pubfinder add_data_to_publication ( self , publication ) add data to a given publication, only append, no overwriting if a value is already set Parameters: Name Type Description Default publication the publication to add data too required Source code in src/meta_source.py def add_data_to_publication ( self , publication ): \"\"\"add data to a given publication, only append, no overwriting if a value is already set Arguments: publication: the publication to add data too \"\"\" response = self . fetch ( publication [ 'doi' ]) data = self . get_lxml ( response ) return self . map ( data , publication ) fetch ( self , doi ) fetch data from the source using its doi Parameters: Name Type Description Default doi the doi of the publication required Source code in src/meta_source.py def fetch ( self , doi ): \"\"\"fetch data from the source using its doi Arguments: doi: the doi of the publication \"\"\" session = Session () headers = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36' , 'Pragma' : 'no-cache' } session . headers . update ( headers ) return get_response ( self . base_url + doi , session ) worker ( self ) the worker thread function will ensure that the publications in the queue are all processed, it will sleep for 0.1s if no item is in the queue to reduce cpu usage Source code in src/meta_source.py def worker ( self ): \"\"\"the worker thread function will ensure that the publications in the queue are all processed, it will sleep for 0.1s if no item is in the queue to reduce cpu usage \"\"\" while self . running : try : item = self . work_queue . pop () except IndexError : time . sleep ( 0.1 ) pass else : if item : # logging.warning(self.log + \" item \" + str(item.get_json())) publication = self . pubfinder . get_publication ( item ) logging . warning ( self . log + \" work on item \" + publication [ 'doi' ]) # logging.warning(self.log + \" q \" + str(queue))x # source stuff publication_temp = self . add_data_to_publication ( publication ) # only if we have any data we set it if publication_temp : publication = publication_temp publication [ 'source' ] = self . tag # no meta since link already present if type ( item ) is Event : item . data [ 'obj' ][ 'data' ] = publication self . pubfinder . finish_work ( item , self . tag ) get_response ( url , s ) get a response from a given url using a given session s, a session can be used for headers, this function is cached up to 100 elements !!! arguments url: the url to get s: the session to use Source code in src/meta_source.py @lru_cache ( maxsize = 100 ) def get_response ( url , s ): \"\"\"get a response from a given url using a given session s, a session can be used for headers, this function is cached up to 100 elements Arguments: url: the url to get s: the session to use \"\"\" return s . get ( url )","title":"meta source"},{"location":"meta_source_ref/#meta_source.MetaSource","text":"\" this source will try to append data using meta tags in the url of the resolved doi url","title":"MetaSource"},{"location":"meta_source_ref/#meta_source.MetaSource.__init__","text":"setup a ThreadPool, don't need the cpu since requests are slow and we wan't to share data Parameters: Name Type Description Default pubfinder the main process where we get data from and to required Source code in src/meta_source.py def __init__ ( self , pubfinder ): \"\"\"setup a ThreadPool, don't need the cpu since requests are slow and we wan't to share data Arguments: pubfinder: the main process where we get data from and to \"\"\" if not self . work_pool : self . work_pool = ThreadPool ( self . threads , self . worker , ()) self . pubfinder = pubfinder","title":"__init__()"},{"location":"meta_source_ref/#meta_source.MetaSource.add_data_to_publication","text":"add data to a given publication, only append, no overwriting if a value is already set Parameters: Name Type Description Default publication the publication to add data too required Source code in src/meta_source.py def add_data_to_publication ( self , publication ): \"\"\"add data to a given publication, only append, no overwriting if a value is already set Arguments: publication: the publication to add data too \"\"\" response = self . fetch ( publication [ 'doi' ]) data = self . get_lxml ( response ) return self . map ( data , publication )","title":"add_data_to_publication()"},{"location":"meta_source_ref/#meta_source.MetaSource.fetch","text":"fetch data from the source using its doi Parameters: Name Type Description Default doi the doi of the publication required Source code in src/meta_source.py def fetch ( self , doi ): \"\"\"fetch data from the source using its doi Arguments: doi: the doi of the publication \"\"\" session = Session () headers = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36' , 'Pragma' : 'no-cache' } session . headers . update ( headers ) return get_response ( self . base_url + doi , session )","title":"fetch()"},{"location":"meta_source_ref/#meta_source.MetaSource.worker","text":"the worker thread function will ensure that the publications in the queue are all processed, it will sleep for 0.1s if no item is in the queue to reduce cpu usage Source code in src/meta_source.py def worker ( self ): \"\"\"the worker thread function will ensure that the publications in the queue are all processed, it will sleep for 0.1s if no item is in the queue to reduce cpu usage \"\"\" while self . running : try : item = self . work_queue . pop () except IndexError : time . sleep ( 0.1 ) pass else : if item : # logging.warning(self.log + \" item \" + str(item.get_json())) publication = self . pubfinder . get_publication ( item ) logging . warning ( self . log + \" work on item \" + publication [ 'doi' ]) # logging.warning(self.log + \" q \" + str(queue))x # source stuff publication_temp = self . add_data_to_publication ( publication ) # only if we have any data we set it if publication_temp : publication = publication_temp publication [ 'source' ] = self . tag # no meta since link already present if type ( item ) is Event : item . data [ 'obj' ][ 'data' ] = publication self . pubfinder . finish_work ( item , self . tag )","title":"worker()"},{"location":"meta_source_ref/#meta_source.get_response","text":"get a response from a given url using a given session s, a session can be used for headers, this function is cached up to 100 elements !!! arguments url: the url to get s: the session to use Source code in src/meta_source.py @lru_cache ( maxsize = 100 ) def get_response ( url , s ): \"\"\"get a response from a given url using a given session s, a session can be used for headers, this function is cached up to 100 elements Arguments: url: the url to get s: the session to use \"\"\" return s . get ( url )","title":"get_response()"},{"location":"openaire_source_ref/","text":"","title":"openaire source"},{"location":"pubfinder_worker_ref/","text":"","title":"pubfinder worker"}]}